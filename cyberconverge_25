OSINT


Cathedral 
The Cathedral
A quick Google Image Search reveals the location: Notre Dame Cathedral, Nuku Hiva, French Polynesia.



From there, we head over to Google Earth (or Google Maps), locate the site, and switch to Street View. The exact coordinates can be extracted directly from the URL in the browser.



The flag found is:
CBCV{-8.9103_-140.1030}




MISC


Breach 

Author: Harsh Singh (DeadStar) Using steghide we can get the hidden file in the image.
POPI{S14TVfUrer}

The Actual aftering decoding it with rot13 cipher is

Flag Reterived is:
CBCV{F14GIsHere}



My hostel room key
Author: K S Vignesh
Decode the key given in the text file 3 times using Base64 to get a decrypted string.

You will find a Google Drive link — follow it.

You will get a PDF there; go to the last page and you will find another Google Drive link to download an image.

Download the image and open it using Notepad.

There you will see a flag-like text inside curly brackets, but it is not the final flag (you’re almost there).

Decode the string present inside the curly brackets 6 times using Base64.

You will get the final answer, which should be placed inside curly brackets.

FLAG: CBCV{FINAL_FLAG}



                                                                              
Your Eyes 
Your Eyes
Author: Bhargav
Simple CTF where the flag is in the subtitles at 1:28

The flag found is:
CBCV{such_4N_3s4y_1_r34lLy?}




WEB


Easy Flag
Author: Aakansh Gupta (Unknown)
A simple web base path traversal vulnerability. Clicking on any on the links leads to a url like: http://20.244.12.130:50002/view?file=db_errors.log Just try and change the view?file=db_errors.log to common paths like ../app.py or ../flag.txt

Visiting http://20.244.12.130:50002/view?file=../flag.txt give:



A string of hex numbers: ` 57 56 57 50 7b 6a 34 6e 42 5f 6e 6c 34 70 33 6c 6d 34 46 5f 70 38 66 48 5f 39 33 39 38 35 31 7d `

Using CyberChef we can decode these to WVWP{j4nB_nl4p3lm4F_p8fH_939851}

Using a ROT6 cypher we get: CBCV{p4tH_tr4v3rs4L_v8lN_939851}



Who am I?
Author: Aakansh Gupta (Unknown)
Simple JWT based ctf. Visit the given url and look for the cookie user .

Decode it using tools like www.jwt.io

It give the flag as "sub":"CBCV{jWt_t0k3ns_us3d_34}"




STEGO



 
Hidden Layers
Author: Amarnath
Initial Steps
Find Morse code.
Convert to Base32.
Apply ROT13.
Remove EVEN Postion Alphabets.
Further Solving and Steps
# Step 1: USE Morse decoder
<img src="./images/morsedecoded1.png" />

# Step 2 & 3: Base32 decode and ROT13
<img src="./images/from32baseandrot13.png" />

# Step 4:Remove Alphabets from EVEN Postion
ACBBCCDVE{FCGRHYIPJTK_LCM4NNO_PBQ3R_SLT4UYV3WRX5Y}Z

Final Flag reterived is:
CBCV{CRYPT_C4N_B3_L4Y3R5}



Layers
Author: Om Mishra
Description
The challenge provides an encoded string. It is encrypted using a Caesar cipher with a shift of 7, then Base64 encoded.

Steps to Solve
Take the given encoded string: Q0JEVntrb3RyeX...}
First, decode it from Base64.
Next, apply a Caesar cipher decryption with shift = 19.
You will get the final flag.
Flag
CBCV{cRy9T0_L4y3r5_4RE_FuN_3135}




REV


Passz CheckS
Challenge Description
You are given a password checker program which is encrypted through an algorithm, decipher,decomipiler and decode the file to find the password

Inspect binary file and Locate custom alphabet and encoded flag strings password_checker | grep -E "(Correct!|Wrong!|Usage:|[A-Za-z0-9+/]{10,})"

Locate XOR key (12 bytes) xxd password_checker | grep -A2 -B2 "0a0b 0c0d

Locate expected-hash bytes (0x7a repeated) grep -a -b -o "zzzz" password_checker xxd password_checker | sed -n '94,96p'

Compute password from key and target byte 0x7a

python3 - <<'PY' xor_key = [0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
0x15] expected = 0x7A password = ''.join(chr(expected ^ b) for b in xor_key) print(password) PY
Retrieve flag ./password_checker "pqvwtujkhino"

Final flag is:
CBCV{CiCaDAzznotz141}
Flag
CBCV{CiCaDAzznotz141}




Vibe Checker
Author: Aakansh Gupta (Unknown)
Lets first analyze the file and its properties

┌──(kali㉿kali)-[~/Desktop/Cyscom/2]
└─$ file vibe_check                                                                                                                                          
vibe_check: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=11ea52dad9c5aa10a5ff59d416fb7210aa3359e9, for GNU/Linux 3.2.0, not stripped

Running the file gives us an option to enter some text. We need to enter the correct text to verify it.

Running the script produces the output as the required flag.

The flag found is:
CBCV{R3v3rs1ng_fl0471ng_p01NtS_15_e4zY_r1ght_36}




